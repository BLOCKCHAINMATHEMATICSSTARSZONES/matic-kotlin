package network.matic.maticj.artifacts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;

import network.matic.maticj.abi.EventEncoder;
import network.matic.maticj.abi.TypeReference;
import network.matic.maticj.abi.datatypes.Address;
import network.matic.maticj.abi.datatypes.Bool;
import network.matic.maticj.abi.datatypes.DynamicBytes;
import network.matic.maticj.abi.datatypes.Event;
import network.matic.maticj.abi.datatypes.Type;
import network.matic.maticj.abi.datatypes.generated.Bytes1;
import network.matic.maticj.abi.datatypes.generated.Bytes32;
import network.matic.maticj.abi.datatypes.generated.Uint256;
import network.matic.maticj.core.protocol.Web3j;
import network.matic.maticj.core.protocol.core.DefaultBlockParameter;
import network.matic.maticj.core.protocol.core.methods.request.EthFilter;
import network.matic.maticj.core.protocol.core.methods.response.TransactionReceipt;
import network.matic.maticj.core.tx.Contract;
import network.matic.maticj.core.tx.TransactionManager;
import network.matic.maticj.core.tx.gas.ContractGasProvider;
import network.matic.maticj.crypto.Credentials;


import network.matic.maticj.core.protocol.core.RemoteCall;
import network.matic.maticj.core.protocol.core.methods.response.Log;
import network.matic.maticj.tuples.generated.Tuple2;
import network.matic.maticj.tuples.generated.Tuple4;
import network.matic.maticj.tuples.generated.Tuple5;


/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the network.matic.maticj.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.4.1.
 */
public class WithdrawManager extends Contract {
    private static final String BINARY = "0x6080604081905260008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36146c4806100576000396000f300608060405260043610620001855763ffffffff60e060020a6000350416630941b5ed81146200018a5780630f6795f214620001c9578063228d71a914620001ef5780632c2d1a3b1462000213578063342de179146200022b57806346e11a8d146200027a5780634b57b0be146200029e57806350c3030814620002d25780636346454114620002ed578063661429c814620003085780636c7ac9d81462000323578063715018a6146200033b57806377a7f06e1462000353578063791adeab14620005025780637d1a3d3714620006b15780638bfe0aec14620006fe5780638da5cb5b146200073b5780638f32d59b14620007535780639025e64c146200077f578063987ab9db146200080f578063a831fa071462000827578063b45d1f68146200083f578063c763e5a11462000863578063d11f045c146200087b578063e117694b146200089f578063e60f1ff114620008ce578063e8afa8e814620008e9578063f2fde38b146200090d578063f67137431462000931578063fb0df30f1462000949575b600080fd5b3480156200019757600080fd5b50620001b7600160a060020a036004358116906024351660443562000964565b60408051918252519081900360200190f35b348015620001d657600080fd5b50620001ed600160a060020a036004351662000a85565b005b348015620001fc57600080fd5b50620001ed600160a060020a036004351662000a93565b3480156200022057600080fd5b50620001b762000acb565b3480156200023857600080fd5b506200024660043562000b00565b60408051600160a060020a039586168152939094166020840152828401919091521515606082015290519081900360800190f35b3480156200028757600080fd5b50620001ed600160a060020a036004351662000b39565b348015620002ab57600080fd5b50620002b662000b5c565b60408051600160a060020a039092168252519081900360200190f35b348015620002df57600080fd5b50620001ed60043562000b6b565b348015620002fa57600080fd5b50620001ed60043562000b8e565b3480156200031557600080fd5b50620001b760043562000d80565b3480156200033057600080fd5b50620002b662000d92565b3480156200034857600080fd5b50620001ed62000da1565b3480156200036057600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552620001ed95833595369560449491939091019190819084018382808284375050604080516020601f60808a01358b0180359182018390048302840183018552818452989b8a359b838c01359b958601359a60608701359a50919850965060a09094019450919281019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975062000e019650505050505050565b3480156200050f57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552620001ed95833595369560449491939091019190819084018382808284375050604080516020601f60808a01358b0180359182018390048302840183018552818452989b8a359b838c01359b958601359a60608701359a50919850965060a09094019450919281019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975062000e819650505050505050565b348015620006be57600080fd5b50620006c96200129d565b604080517fff000000000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b3480156200070b57600080fd5b5062000722600160a060020a0360043516620012c1565b6040805192835260208301919091528051918290030190f35b3480156200074857600080fd5b50620002b66200136b565b3480156200076057600080fd5b506200076b6200137a565b604080519115158252519081900360200190f35b3480156200078c57600080fd5b50620007976200138b565b6040805160208082528351818301528351919283929083019185019080838360005b83811015620007d3578181015183820152602001620007b9565b50505050905090810190601f168015620008015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156200081c57600080fd5b50620002b6620013c2565b3480156200083457600080fd5b50620001b7620013d1565b3480156200084c57600080fd5b50620001ed600160a060020a0360043516620013d7565b3480156200087057600080fd5b50620001b7620013fa565b3480156200088857600080fd5b50620002b6600160a060020a03600435166200142f565b348015620008ac57600080fd5b50620001ed600160a060020a036004358116906024351660443515156200144a565b348015620008db57600080fd5b506200024660043562001474565b348015620008f657600080fd5b50620001ed600160a060020a0360043516620014ad565b3480156200091a57600080fd5b50620001ed600160a060020a036004351662001535565b3480156200093e57600080fd5b50620002b662001556565b3480156200095657600080fd5b50620001ed60043562001565565b6002546040805160e260020a6336a82795028152600160a060020a0386811660048301529151600093929092169163daa09e549160248082019260209290919082900301818787803b158015620009ba57600080fd5b505af1158015620009cf573d6000803e3d6000fd5b505050506040513d6020811015620009e657600080fd5b50511562000a3c5750604080516c01000000000000000000000000600160a060020a0380871682028352851602601482015260288101839052815190819003604801902060009081526004602052205462000a7e565b50604080516c01000000000000000000000000600160a060020a0380871682028352851602601482015281519081900360280190206000908152600460205220545b9392505050565b62000a90816200157d565b50565b62000a9d6200137a565b151562000aa957600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b604080517f766f7465000000000000000000000000000000000000000000000000000000008152905190819003600401902081565b60036020819052600091825260409091208054600182015460028301549290930154600160a060020a0391821693909116919060ff1684565b600154600160a060020a0316331462000b5157600080fd5b62000a908162001972565b600754600160a060020a031681565b600154600160a060020a0316331462000b8357600080fd5b62000a9081620019aa565b60008060008060008062000ba162003d49565b600254604080517fb02c43d0000000000000000000000000000000000000000000000000000000008152600481018b90529051600160a060020a039092169163b02c43d09160248082019260a0929091908290030181600087803b15801562000c0957600080fd5b505af115801562000c1e573d6000803e3d6000fd5b505050506040513d60a081101562000c3557600080fd5b508051602082015160408301516060840151608090940151929a5090985096509094509250600160a060020a0385161580159062000c7b5750600160a060020a03861633145b151562000c8757600080fd5b600154604080517f61bbd461000000000000000000000000000000000000000000000000000000008152600481018a90529051600160a060020a03909216916361bbd461916024808201926080929091908290030181600087803b15801562000cef57600080fd5b505af115801562000d04573d6000803e3d6000fd5b505050506040513d608081101562000d1b57600080fd5b506040015191506000821162000d3057600080fd5b5060408051608081018252338152600160a060020a03861660208201529081018490526000606082015262000d76816c0c9f2c9cd04674edea400000008a028562001ad1565b5050505050505050565b60046020526000908152604090205481565b600254600160a060020a031681565b62000dab6200137a565b151562000db757600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360008054600160a060020a0319169055565b60008062000e0e62003d49565b62000e1d8589868c3362001e5c565b909350915062000e338789888d87873362002289565b5060408051608081018252338152600160a060020a03841660208201529081018290526001606082015262000e71818f8f8f8f8f8f8f600062002b50565b5050505050505050505050505050565b60008062000e8e62003d49565b73__MerklePatriciaProof___________________6379d1d4fa888a898e6040518563ffffffff1660e060020a028152600401808060200180602001806020018560001916600019168152602001848103845288818151815260200191508051906020019080838360005b8381101562000f1357818101518382015260200162000ef9565b50505050905090810190601f16801562000f415780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b8381101562000f7657818101518382015260200162000f5c565b50505050905090810190601f16801562000fa45780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b8381101562000fd957818101518382015260200162000fbf565b50505050905090810190601f168015620010075780820380516001836020036101000a031916815260200191505b5097505050505050505060206040518083038186803b1580156200102a57600080fd5b505af41580156200103f573d6000803e3d6000fd5b505050506040513d60208110156200105657600080fd5b505115156001146200106757600080fd5b73__MerklePatriciaProof___________________6379d1d4fa868a878d6040518563ffffffff1660e060020a028152600401808060200180602001806020018560001916600019168152602001848103845288818151815260200191508051906020019080838360005b83811015620010ec578181015183820152602001620010d2565b50505050905090810190601f1680156200111a5780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b838110156200114f57818101518382015260200162001135565b50505050905090810190601f1680156200117d5780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b83811015620011b257818101518382015260200162001198565b50505050905090810190601f168015620011e05780820380516001836020036101000a031916815260200191505b5097505050505050505060206040518083038186803b1580156200120357600080fd5b505af415801562001218573d6000803e3d6000fd5b505050506040513d60208110156200122f57600080fd5b505115156001146200124057600080fd5b6200124c853362002ded565b60408051608081019091523381529194509250602081016200126e8962003075565b600160a060020a03168152602081018590526000604090910152905062000e71818f8f8f8f8f8f8f8a62002b50565b7f020000000000000000000000000000000000000000000000000000000000000081565b600160a060020a038082166000908152600560205260408082205481517fd6362e9700000000000000000000000000000000000000000000000000000000815282519394859492169263d6362e979260048084019382900301818787803b1580156200132c57600080fd5b505af115801562001341573d6000803e3d6000fd5b505050506040513d60408110156200135857600080fd5b5080516020909101519092509050915091565b600054600160a060020a031690565b600054600160a060020a0316331490565b60408051808201909152600281527f2323000000000000000000000000000000000000000000000000000000000000602082015281565b600154600160a060020a031681565b61271081565b600154600160a060020a03163314620013ef57600080fd5b62000a90816200329e565b604080517f6865696d64616c6c2d784f5549523000000000000000000000000000000000008152905190819003600f01902081565b600560205260009081526040902054600160a060020a031681565b600154600160a060020a031633146200146257600080fd5b6200146f83838362003325565b505050565b60009081526003602081905260409091208054600182015460028301549290930154600160a060020a0391821694919093169260ff1690565b620014b76200137a565b1515620014c357600080fd5b600160a060020a0381161515620014d957600080fd5b600154604051600160a060020a038084169216907f211c9015fc81c0dbd45bd99f0f29fc1c143bfd53442d5ffd722bbbef7a887fe990600090a360018054600160a060020a031916600160a060020a0392909216919091179055565b6200153f6200137a565b15156200154b57600080fd5b62000a90816200337e565b600654600160a060020a031681565b600154600160a060020a0316331462000a9057600080fd5b60008060006200158c62003d49565b600160a060020a0380861660009081526005602052604081205490911692505b600083600160a060020a031663bda1504b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015620015ed57600080fd5b505af115801562001602573d6000803e3d6000fd5b505050506040513d60208110156200161957600080fd5b505111156200196a576200162d86620012c1565b90955093504285111562001641576200196a565b600084815260036020818152604080842081516080810183528154600160a060020a0390811682526001830154811682860152600283015482850152919094015460ff161515606085015260065482517f6352211e000000000000000000000000000000000000000000000000000000008152600481018b905292519497501693636352211e93602480840194939192918390030190829087803b158015620016e957600080fd5b505af1158015620016fe573d6000803e3d6000fd5b505050506040513d60208110156200171557600080fd5b50519050600160a060020a03811615620018f757600654604080517f9dc29fac000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301526024820188905291519190921691639dc29fac91604480830192600092919082900301818387803b1580156200179857600080fd5b505af1158015620017ad573d6000803e3d6000fd5b5050505081606001511562001805578151604080516c01000000000000000000000000600160a060020a03808b1682028352909316909202601483015280519182900360280190912060009081526004602052908120555b60015460408084015181517f01f47471000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301528581166024830152604482019290925291519216916301f47471916064808201926020929091908290030181600087803b1580156200188157600080fd5b505af115801562001896573d6000803e3d6000fd5b505050506040513d6020811015620018ad57600080fd5b505060408083015181519081529051600160a060020a0380891692908416917f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9181900360200190a35b82600160a060020a031663b07576ac6040518163ffffffff1660e060020a0281526004016040805180830381600087803b1580156200193557600080fd5b505af11580156200194a573d6000803e3d6000fd5b505050506040513d60408110156200196157600080fd5b50620015ac9050565b505050505050565b600160a060020a03811615156200198857600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b600654604080517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490529051600160a060020a03909216916000918391636352211e9160248082019260209290919082900301818787803b15801562001a1657600080fd5b505af115801562001a2b573d6000803e3d6000fd5b505050506040513d602081101562001a4257600080fd5b5051604080517f9dc29fac000000000000000000000000000000000000000000000000000000008152600160a060020a03808416600483015260248201879052915192935090841691639dc29fac9160448082019260009290919082900301818387803b15801562001ab357600080fd5b505af115801562001ac8573d6000803e3d6000fd5b50505050505050565b602080840151600160a060020a039081166000908152600590925260408220548291829116151562001b0257600080fd5b6002546020808801516040805160e260020a6336a82795028152600160a060020a0392831660048201529051919093169263daa09e549260248083019391928290030181600087803b15801562001b5857600080fd5b505af115801562001b6d573d6000803e3d6000fd5b505050506040513d602081101562001b8457600080fd5b50511562001bdf576020860151865160408089015181516c01000000000000000000000000600160a060020a039586168102825294909316909302601483015260288201929092529051908190036048019020925062001c33565b604086015160001062001bf157600080fd5b60208601518651604080516c01000000000000000000000000600160a060020a0394851681028252939092169092026014820152905190819003602801902092505b6000838152600460205260409020541562001c4d57600080fd5b60008581526003602052604090206001015461012c42019250600160a060020a03161562001c7a57600080fd5b50602080860151600160a060020a039081166000908152600590925260408083205481517f1d834a1b000000000000000000000000000000000000000000000000000000008152600481018690526024810189905291519216928392631d834a1b92604480820193929182900301818387803b15801562001cfa57600080fd5b505af115801562001d0f573d6000803e3d6000fd5b50506006548851604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018b905290519190921693506340c10f199250604480830192600092919082900301818387803b15801562001d8457600080fd5b505af115801562001d99573d6000803e3d6000fd5b50505060008681526003602081815260408084208b518154600160a060020a0319908116600160a060020a039283161783558d85018051600185018054909316908416179091558d84018051600285015560608f015193909601805460ff19169315159390931790925589865260048452948290208b9055518b5193518251908152915190851695508a9493909316927ff0537507c0bb9b823a1e4f5522ed9f25512618d4d169c9eb70a5ee2e9fb8bd57929181900390910190a4505050505050565b6000806060600062001e7862001e728a620033ef565b6200343b565b805190925060041462001e8a57600080fd5b62001ec062001eb283600381518110151562001ea257fe5b906020019060200201516200343b565b8051600190811062001ea257fe5b805190925060031462001ed257600080fd5b62001ef682600081518110151562001ee657fe5b9060200190602002015162003504565b905062001f2862001f2083600281518110151562001f1057fe5b9060200190602002015162003538565b6000620035a2565b925062001f3e82600181518110151562001ea257fe5b805190925060031462001f5057600080fd5b81517febff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f9062001f97908490600090811062001f8757fe5b90602001906020020151620035c3565b1462001fa257600080fd5b62001fc262001fba83600181518110151562001f1057fe5b600c620035d6565b600254604080517fe4860339000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915193975084821693919092169163e48603399160248083019260209291908290030181600087803b1580156200203257600080fd5b505af115801562002047573d6000803e3d6000fd5b505050506040513d60208110156200205e57600080fd5b5051600160a060020a0316146200207457600080fd5b6200208c62001fba83600281518110151562001f1057fe5b600160a060020a03868116911614620020a457600080fd5b73__MerklePatriciaProof___________________6379d1d4fa8a8a8a8a6040518563ffffffff1660e060020a028152600401808060200180602001806020018560001916600019168152602001848103845288818151815260200191508051906020019080838360005b83811015620021295781810151838201526020016200210f565b50505050905090810190601f168015620021575780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b838110156200218c57818101518382015260200162002172565b50505050905090810190601f168015620021ba5780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b83811015620021ef578181015183820152602001620021d5565b50505050905090810190601f1680156200221d5780820380516001836020036101000a031916815260200191505b5097505050505050505060206040518083038186803b1580156200224057600080fd5b505af415801562002255573d6000803e3d6000fd5b505050506040513d60208110156200226c57600080fd5b505115156001146200227d57600080fd5b50509550959350505050565b60608060006200229d62001e728b620033ef565b8051909350600914620022af57600080fd5b620022c383600381518110151562001ee657fe5b600254604080517fe4860339000000000000000000000000000000000000000000000000000000008152600160a060020a038a81166004830152915193821693919092169163e48603399160248083019260209291908290030181600087803b1580156200233057600080fd5b505af115801562002345573d6000803e3d6000fd5b505050506040513d60208110156200235c57600080fd5b5051600160a060020a0316146200237257600080fd5b6200238683600581518110151562001f1057fe5b516024146200239457600080fd5b82517f2e1a7d4d0000000000000000000000000000000000000000000000000000000090620023e590620023df90620023d5908790600590811062001f1057fe5b6000600462003607565b6200368d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146200240f57600080fd5b6002546040805160e260020a6336a82795028152600160a060020a0389811660048301529151919092169163daa09e549160248083019260209291908290030181600087803b1580156200246257600080fd5b505af115801562002477573d6000803e3d6000fd5b505050506040513d60208110156200248e57600080fd5b5051806200249c5750600085115b1515620024a857600080fd5b620024c8620024c084600581518110151562001f1057fe5b6004620035a2565b8514620024d457600080fd5b73__MerklePatriciaProof___________________6379d1d4fa8b8b8b8b6040518563ffffffff1660e060020a028152600401808060200180602001806020018560001916600019168152602001848103845288818151815260200191508051906020019080838360005b83811015620025595781810151838201526020016200253f565b50505050905090810190601f168015620025875780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b83811015620025bc578181015183820152602001620025a2565b50505050905090810190601f168015620025ea5780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b838110156200261f57818101518382015260200162002605565b50505050905090810190601f1680156200264d5780820380516001836020036101000a031916815260200191505b5097505050505050505060206040518083038186803b1580156200267057600080fd5b505af415801562002685573d6000803e3d6000fd5b505050506040513d60208110156200269c57600080fd5b50511515600114620026ad57600080fd5b604080516009808252610140820190925290816020015b6060815260200190600190039081620026c4579050509150600090505b600560ff821611620027285762002703838260ff1681518110151562001f1057fe5b828260ff168151811015156200271557fe5b60209081029091010152600101620026e1565b6040805160208101909152600081528251839060049081106200274757fe5b906020019060200201819052506040805190810160405280600281526020017f23230000000000000000000000000000000000000000000000000000000000008152508260068151811015156200279a57fe5b906020019060200201819052506020604051908101604052806000815250826007815181101515620027c857fe5b906020019060200201819052506020604051908101604052806000815250826008815181101515620027f657fe5b6020908102909101015260016200280d8362003694565b6040518082805190602001908083835b602083106200283e5780518252601f1990920191602091820191016200281d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902073__Common________________________________63261737b26200289987600681518110151562001f1057fe5b604080518082018252600281527f2323000000000000000000000000000000000000000000000000000000000000602080830191825292517f7ae93b190000000000000000000000000000000000000000000000000000000081526004810193845282516024820152825173__Common________________________________94637ae93b199493909283926044909101919080838360005b838110156200294c57818101518382015260200162002932565b50505050905090810190601f1680156200297a5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156200299857600080fd5b505af4158015620029ad573d6000803e3d6000fd5b505050506040513d6020811015620029c457600080fd5b50516040805160e060020a63ffffffff861602815260ff8316602482015260048101918252835160448201528351829160640190602086019080838360005b8381101562002a1d57818101518382015260200162002a03565b50505050905090810190601f16801562002a4b5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801562002a6a57600080fd5b505af415801562002a7f573d6000803e3d6000fd5b505050506040513d602081101562002a9657600080fd5b5051855162002aad908790600790811062001f8757fe5b62002ac187600881518110151562001f8757fe5b60408051600080825260208083018085529790975260ff90951681830152606081019390935260808301919091525160a08083019493601f198301938390039091019190865af115801562002b1a573d6000803e3d6000fd5b50505060206040510351600160a060020a031684600160a060020a031614151562002b4457600080fd5b50505050505050505050565b600154604080517f61bbd461000000000000000000000000000000000000000000000000000000008152600481018b9052905160009283928392600160a060020a03909216916361bbd4619160248082019260809290919082900301818787803b15801562002bbe57600080fd5b505af115801562002bd3573d6000803e3d6000fd5b505050506040513d608081101562002bea57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190505050905050809450819350505088888888604051808581526020018481526020018360001916600019168152602001826000191660001916815260200194505050505060405180910390206000191673__Merkle________________________________636c8f455c9091858c03858e6040518563ffffffff1660e060020a028152600401808560001916600019168152602001848152602001836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101562002cfa57818101518382015260200162002ce0565b50505050905090810190601f16801562002d285780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b15801562002d4957600080fd5b505af415801562002d5e573d6000803e3d6000fd5b505050506040513d602081101562002d7557600080fd5b5051151562002d8357600080fd5b8360ff1662002db062002daa62002da462002d9e89620033ef565b62003538565b620033ef565b620036fe565b620186a0028a64e8d4a51000028d6c0c9f2c9cd04674edea4000000002010101905062002ddf8c828a62001ad1565b505050505050505050505050565b60008060608060008062002e0562001e7289620033ef565b805190945060041462002e1757600080fd5b62002e2f62001eb285600381518110151562001ea257fe5b935062002e4584600181518110151562001ea257fe5b925062002e5f62001fba84600281518110151562001f1057fe5b915062002e7962001fba84600381518110151562001f1057fe5b6002548451919250600160a060020a03169063daa09e549062002eb4908690600190811062002ea457fe5b90602001906020020151620036fe565b6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801562002f0057600080fd5b505af115801562002f15573d6000803e3d6000fd5b505050506040513d602081101562002f2c57600080fd5b50511562002fd357600160a060020a038181169088161462002faf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f43616e277420657869742077697468207472616e736665726564204e46540000604482015290519081900360640190fd5b62002fc762001f2085600281518110151562001f1057fe5b9550600094506200306a565b86600160a060020a031681600160a060020a031614156200301a576200300e6200300685600281518110151562001f1057fe5b6080620035a2565b9550600194506200305c565b86600160a060020a031682600160a060020a031614156200305c57620030556200304d85600281518110151562001f1057fe5b6060620035a2565b9550600094505b600086116200306a57600080fd5b505050509250929050565b6000606060006200308a62001e7285620033ef565b80519092506009146200309c57600080fd5b6002548251600160a060020a03909116906340828ebf90620030c6908590600390811062001ee657fe5b6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156200311257600080fd5b505af115801562003127573d6000803e3d6000fd5b505050506040513d60208110156200313e57600080fd5b50519250600160a060020a03831615156200315857600080fd5b62003174620023df620023d584600581518110151562001f1057fe5b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167fa9059cbb0000000000000000000000000000000000000000000000000000000014806200328b57506002546040805160e260020a6336a82795028152600160a060020a0386811660048301529151919092169163daa09e549160248083019260209291908290030181600087803b1580156200321257600080fd5b505af115801562003227573d6000803e3d6000fd5b505050506040513d60208110156200323e57600080fd5b505180156200328b57507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f23b872dd00000000000000000000000000000000000000000000000000000000145b15156200329757600080fd5b5050919050565b600160a060020a0381161515620032b457600080fd5b60078054600160a060020a031916600160a060020a038316179055620032d962003d70565b604051809103906000f080158015620032f6573d6000803e3d6000fd5b50600160a060020a0391821660009081526005602052604090208054600160a060020a03191691909216179055565b6200332f62003d70565b604051809103906000f0801580156200334c573d6000803e3d6000fd5b50600160a060020a0393841660009081526005602052604090208054600160a060020a03191691909416179092555050565b600160a060020a03811615156200339457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b620033f962003d81565b8151600081151562003421576040805180820190915260008082526020820152925062003297565b506040805180820190915260209384018152928301525090565b606060006200344962003d98565b600062003456856200374d565b15156200346257600080fd5b6200346d8562003779565b925082604051908082528060200260200182016040528015620034ad57816020015b6200349962003d81565b8152602001906001900390816200348f5790505b509350620034bb85620037f3565b91505b620034c98262003833565b15620034fc57620034da8262003854565b8482815181101515620034e957fe5b60209081029091010152600101620034be565b505050919050565b60008062003512836200389e565b91505060148111156200352457600080fd5b6200352f83620036fe565b91505b50919050565b6060600080620035488462003922565b15156200355457600080fd5b6200355f846200389e565b91509150806040519080825280601f01601f19166020018201604052801562003592578160200160208202803883390190505b509250620032978284836200394d565b60008082602001845110151515620035b957600080fd5b5050016020015190565b6000620035d082620036fe565b92915050565b60008082601401845110151515620035ed57600080fd5b505001602001516c01000000000000000000000000900490565b6060808284018551101515156200361d57600080fd5b82158015620036385760405191506020820160405262003684565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156200367357805183526020928301920162003659565b5050858452601f01601f1916604052505b50949350505050565b6020015190565b60608060005b8351811015620036dd57620036d282620036cc8684815181101515620036bc57fe5b906020019060200201516200398f565b62003a06565b91506001016200369a565b620036f6620036ef835160c062003a85565b8362003a06565b949350505050565b60008060006200370e8462003922565b15156200371a57600080fd5b62003725846200389e565b909250905060208111156200373957600080fd5b806020036101000a82510492505050919050565b60008082602001516000141562003768576000915062003532565b5050515160c060009190911a101590565b6000806000806000806200378d876200374d565b15156200379e5760009550620037e9565b8651805160001a95509350620037b48762003b6f565b840192506001876020015185010391505b818311620037e557620037d88362003bf9565b90920191600101620037c5565b8095505b5050505050919050565b620037fd62003d98565b60006200380a836200374d565b15156200381657600080fd5b620038218362003b6f565b83519383529092016020820152919050565b60006200383f62003d81565b50508051602080820151915192015191011190565b6200385e62003d81565b6000806200386c8462003833565b15620001855783602001519150620038848262003bf9565b828452602080850182905283820190860152905062003297565b6000806000806000620038b18662003922565b1515620038bd57600080fd5b8551805160001a935091506080831015620038df57819450600193506200391a565b60b8831015620038ff57600186602001510393508160010194506200391a565b60b78303905080600187602001510303935080820160010194505b505050915091565b6000808260200151600014156200393d576000915062003532565b5050515160c060009190911a1090565b60006020601f83010484602085015b8284146200397c576020840282810151908201526001909301926200395c565b6000865160200187015250505050505050565b60608082516001148015620039c457506080836000815181101515620039b157fe5b016020015160f860020a90819004810204105b15620039f257604080516001808252818301909252906020808301908038833950859350620035d092505050565b62000a7e62003a048451608062003a85565b845b6060806040519050835180825260208201818101602087015b8183101562003a3957805183526020928301920162003a1f565b50855184518101855292509050808201602086015b8183101562003a6857805183526020928301920162003a4e565b509551919091011594909401601f01601f19166040529392505050565b606080600080606080603888101562003b0a57604080516001808252818301909252906020808301908038833901905050945086880160f860020a0285600081518110151562003ad157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084955062003b64565b600192505b828881151562003b1b57fe5b041562003b3657600190930192610100929092029162003b0f565b62003b4684886037010162003c8e565b915062003b538862003c8e565b905062003b61828262003a06565b95505b505050505092915050565b600080600083602001516000141562003b8c576000925062003297565b50508151805160001a90608082101562003baa576000925062003297565b60b882108062003bc7575060c0821015801562003bc7575060f882105b1562003bd7576001925062003297565b60c082101562003bee5760b5198201925062003297565b5060f5190192915050565b8051600090811a608081101562003c14576001915062003532565b60b881101562003c2b57607e198101915062003532565b60c081101562003c5657600183015160b76020839003016101000a9004810160b51901915062003532565b60f881101562003c6d5760be198101915062003532565b6001929092015160f76020849003016101000a900490910160f51901919050565b60606001600060ff84111562003ca357600291505b816040519080825280601f01601f19166020018201604052801562003cd2578160200160208202803883390190505b509250600090505b81811015620032975780600183030360080260020a8481151562003cfa57fe5b0460f860020a02838281518110151562003d1057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060010162003cda565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040516108dd8062003dbc83390190565b604080518082019091526000808252602082015290565b60606040519081016040528062003dae62003d81565b81526020016000815250905600608060405234801561001057600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36040805160208101909152600081526100769060019081610081565b5060006002556100ee565b8280548282559060005260206000209081019282156100c1579160200282015b828111156100c1578251829060ff169055916020019190600101906100a1565b506100cd9291506100d1565b5090565b6100eb91905b808211156100cd57600081556001016100d7565b90565b6107e0806100fd6000396000f30060806040526004361061008d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631d834a1b8114610092578063715018a6146100af5780638da5cb5b146100c45780638f32d59b146100f5578063b07576ac1461011e578063bda1504b1461014c578063d6362e9714610173578063f2fde38b14610188575b600080fd5b34801561009e57600080fd5b506100ad6004356024356101a9565b005b3480156100bb57600080fd5b506100ad610232565b3480156100d057600080fd5b506100d961029c565b60408051600160a060020a039092168252519081900360200190f35b34801561010157600080fd5b5061010a6102ac565b604080519115158252519081900360200190f35b34801561012a57600080fd5b506101336102bd565b6040805192835260208301919091528051918290030190f35b34801561015857600080fd5b50610161610397565b60408051918252519081900360200190f35b34801561017f57600080fd5b5061013361039d565b34801561019457600080fd5b506100ad600160a060020a03600435166103ca565b60006101b36102ac565b15156101be57600080fd5b506001805480820182556000829052700100000000000000000000000000000000840283177fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101819055600254909161021f919063ffffffff6103e916565b600281905561022d90610403565b505050565b61023a6102ac565b151561024557600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03165b90565b600054600160a060020a0316331490565b60008060006102ca6102ac565b15156102d557600080fd5b60018054819081106102e357fe5b90600052602060002001549050600160025481548110151561030157fe5b906000526020600020015460018081548110151561031b57fe5b9060005260206000200181905550600160025481548110151561033a57fe5b600091825260208220015560025461035990600163ffffffff6104db16565b60025561036660016104ed565b600180546103799163ffffffff6104db16565b610384600182610777565b5061038e816105bd565b92509250509091565b60025481565b6000806103c26001808154811015156103b257fe5b90600052602060002001546105bd565b915091509091565b6103d26102ac565b15156103dd57600080fd5b6103e6816105e9565b50565b6000828201838110156103f857fe5b8091505b5092915050565b6001805482918291600091908390811061041957fe5b906000526020600020015490505b600161043a84600263ffffffff61066616565b8154811061044457fe5b90600052602060002001548110156104b157600161046984600263ffffffff61066616565b8154811061047357fe5b906000526020600020015460018481548110151561048d57fe5b6000918252602090912001556104aa83600263ffffffff61066616565b9250610427565b8282146104d557806001848154811015156104c857fe5b6000918252602090912001555b50505050565b6000828211156104e757fe5b50900390565b600180548291829160009182918490811061050457fe5b9060005260206000200154915061051a8461067d565b90505b60025481111580156105465750600180548290811061053857fe5b906000526020600020015482115b1561059257600180548290811061055957fe5b906000526020600020015460018581548110151561057357fe5b60009182526020909120015592508261058b8161067d565b905061051d565b8383146105b657816001858154811015156105a957fe5b6000918252602090912001555b5050505050565b70010000000000000000000000000000000081046fffffffffffffffffffffffffffffffff8216915091565b600160a060020a03811615156105fe57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080828481151561067457fe5b04949350505050565b60006002546106a7600161069b60028661074c90919063ffffffff16565b9063ffffffff6103e916565b11156106c5576106be82600263ffffffff61074c16565b9050610747565b60016106dc8161069b85600263ffffffff61074c16565b815481106106e657fe5b600091825260209091200154600161070584600263ffffffff61074c16565b8154811061070f57fe5b90600052602060002001541015610731576106be82600263ffffffff61074c16565b6106be600161069b84600263ffffffff61074c16565b919050565b60008083151561075f57600091506103fc565b5082820282848281151561076f57fe5b04146103f857fe5b81548183558181111561022d5760008381526020902061022d9181019083016102a991905b808211156107b0576000815560010161079c565b50905600a165627a7a72305820b14fd122632a68c43f9a381c4c21bef366e12ff6f43028b85704f85542172d690029a165627a7a723058204c5fccb026cee2fc08a88d8988a2e90cd46d94a66e8189bfd303b5bad693c9eb0029";

    public static final String FUNC_GETEXITID = "getExitId";

    public static final String FUNC_ROUNDTYPE = "roundType";

    public static final String FUNC_EXITS = "exits";

    public static final String FUNC_WETHTOKEN = "wethToken";

    public static final String FUNC_OWNEREXITS = "ownerExits";

    public static final String FUNC_DEPOSITMANAGER = "depositManager";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_VOTETYPE = "voteType";

    public static final String FUNC_GETNEXTEXIT = "getNextExit";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_NETWORKID = "networkId";

    public static final String FUNC_ROOTCHAIN = "rootChain";

    public static final String FUNC_CHILD_BLOCK_INTERVAL = "CHILD_BLOCK_INTERVAL";

    public static final String FUNC_CHAIN = "chain";

    public static final String FUNC_EXITSQUEUES = "exitsQueues";

    public static final String FUNC_GETEXIT = "getExit";

    public static final String FUNC_CHANGEROOTCHAIN = "changeRootChain";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_EXITNFTCONTRACT = "exitNFTContract";

    public static final String FUNC_SETEXITNFTCONTRACT = "setExitNFTContract";

    public static final String FUNC_SETDEPOSITMANAGER = "setDepositManager";

    public static final String FUNC_SETWETHTOKEN = "setWETHToken";

    public static final String FUNC_MAPTOKEN = "mapToken";

    public static final String FUNC_FINALIZECOMMIT = "finalizeCommit";

    public static final String FUNC_DELETEEXIT = "deleteExit";

    public static final String FUNC_PROCESSEXITS = "processExits";

    public static final String FUNC_WITHDRAWBURNTTOKENS = "withdrawBurntTokens";

    public static final String FUNC_WITHDRAWTOKENS = "withdrawTokens";

    public static final String FUNC_WITHDRAWDEPOSITTOKENS = "withdrawDepositTokens";

    public static final Event WITHDRAW_EVENT = new Event("Withdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EXITSTARTED_EVENT = new Event("ExitStarted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROOTCHAINCHANGED_EVENT = new Event("RootChainChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected WithdrawManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WithdrawManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WithdrawManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WithdrawManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> getExitId(String _token, String _owner, BigInteger _tokenId) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_GETEXITID, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.Address(_token), 
                new network.matic.maticj.abi.datatypes.Address(_owner), 
                new network.matic.maticj.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<byte[]> roundType() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_ROUNDTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Tuple4<String, String, BigInteger, Boolean>> exits(BigInteger param0) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_EXITS, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple4<String, String, BigInteger, Boolean>>(function,
                new Callable<Tuple4<String, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<String> wethToken() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_WETHTOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> ownerExits(byte[] param0) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_OWNEREXITS, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> depositManager() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_DEPOSITMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<byte[]> voteType() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_VOTETYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> getNextExit(String _token) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_GETNEXTEXIT, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.Address(_token)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> owner() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isOwner() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<byte[]> networkId() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_NETWORKID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<String> rootChain() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_ROOTCHAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> CHILD_BLOCK_INTERVAL() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_CHILD_BLOCK_INTERVAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<byte[]> chain() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_CHAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<String> exitsQueues(String param0) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_EXITSQUEUES, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple4<String, String, BigInteger, Boolean>> getExit(BigInteger _utxoPos) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_GETEXIT, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.generated.Uint256(_utxoPos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple4<String, String, BigInteger, Boolean>>(function,
                new Callable<Tuple4<String, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> changeRootChain(String newRootChain) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_CHANGEROOTCHAIN, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.Address(newRootChain)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> exitNFTContract() {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(FUNC_EXITNFTCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventFlowable(filter);
    }

    public List<ExitStartedEventResponse> getExitStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXITSTARTED_EVENT, transactionReceipt);
        ArrayList<ExitStartedEventResponse> responses = new ArrayList<ExitStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExitStartedEventResponse typedResponse = new ExitStartedEventResponse();
            typedResponse.exitor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.utxoPos = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExitStartedEventResponse> exitStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ExitStartedEventResponse>() {
            @Override
            public ExitStartedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EXITSTARTED_EVENT, log);
                ExitStartedEventResponse typedResponse = new ExitStartedEventResponse();
                typedResponse.exitor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.utxoPos = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExitStartedEventResponse> exitStartedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXITSTARTED_EVENT));
        return exitStartedEventFlowable(filter);
    }

    public List<RootChainChangedEventResponse> getRootChainChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROOTCHAINCHANGED_EVENT, transactionReceipt);
        ArrayList<RootChainChangedEventResponse> responses = new ArrayList<RootChainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RootChainChangedEventResponse typedResponse = new RootChainChangedEventResponse();
            typedResponse.previousRootChain = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newRootChain = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RootChainChangedEventResponse> rootChainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RootChainChangedEventResponse>() {
            @Override
            public RootChainChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROOTCHAINCHANGED_EVENT, log);
                RootChainChangedEventResponse typedResponse = new RootChainChangedEventResponse();
                typedResponse.previousRootChain = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newRootChain = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RootChainChangedEventResponse> rootChainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOTCHAINCHANGED_EVENT));
        return rootChainChangedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> setExitNFTContract(String _nftContract) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_SETEXITNFTCONTRACT, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.Address(_nftContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDepositManager(String _depositManager) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_SETDEPOSITMANAGER, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.Address(_depositManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setWETHToken(String _token) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_SETWETHTOKEN, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.Address(_token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mapToken(String _rootToken, String _childToken, Boolean _isERC721) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_MAPTOKEN, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.Address(_rootToken), 
                new network.matic.maticj.abi.datatypes.Address(_childToken), 
                new network.matic.maticj.abi.datatypes.Bool(_isERC721)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> finalizeCommit(BigInteger _currentHeaderBlock) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_FINALIZECOMMIT, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.generated.Uint256(_currentHeaderBlock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteExit(BigInteger exitId) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_DELETEEXIT, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.generated.Uint256(exitId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> processExits(String _token) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_PROCESSEXITS, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.Address(_token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawBurntTokens(BigInteger headerNumber, byte[] headerProof, BigInteger blockNumber, BigInteger blockTime, byte[] txRoot, byte[] receiptRoot, byte[] path, byte[] txBytes, byte[] txProof, byte[] receiptBytes, byte[] receiptProof) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_WITHDRAWBURNTTOKENS, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.generated.Uint256(headerNumber), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(headerProof), 
                new network.matic.maticj.abi.datatypes.generated.Uint256(blockNumber), 
                new network.matic.maticj.abi.datatypes.generated.Uint256(blockTime), 
                new network.matic.maticj.abi.datatypes.generated.Bytes32(txRoot), 
                new network.matic.maticj.abi.datatypes.generated.Bytes32(receiptRoot), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(path), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(txBytes), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(txProof), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(receiptBytes), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(receiptProof)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawTokens(BigInteger headerNumber, byte[] headerProof, BigInteger blockNumber, BigInteger blockTime, byte[] txRoot, byte[] receiptRoot, byte[] path, byte[] txBytes, byte[] txProof, byte[] receiptBytes, byte[] receiptProof) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_WITHDRAWTOKENS, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.generated.Uint256(headerNumber), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(headerProof), 
                new network.matic.maticj.abi.datatypes.generated.Uint256(blockNumber), 
                new network.matic.maticj.abi.datatypes.generated.Uint256(blockTime), 
                new network.matic.maticj.abi.datatypes.generated.Bytes32(txRoot), 
                new network.matic.maticj.abi.datatypes.generated.Bytes32(receiptRoot), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(path), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(txBytes), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(txProof), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(receiptBytes), 
                new network.matic.maticj.abi.datatypes.DynamicBytes(receiptProof)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawDepositTokens(BigInteger _depositCount) {
        final network.matic.maticj.abi.datatypes.Function function = new network.matic.maticj.abi.datatypes.Function(
                FUNC_WITHDRAWDEPOSITTOKENS, 
                Arrays.<Type>asList(new network.matic.maticj.abi.datatypes.generated.Uint256(_depositCount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static WithdrawManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new WithdrawManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WithdrawManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new WithdrawManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WithdrawManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new WithdrawManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WithdrawManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new WithdrawManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WithdrawManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WithdrawManager.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<WithdrawManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WithdrawManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<WithdrawManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WithdrawManager.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<WithdrawManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WithdrawManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class WithdrawEventResponse extends BaseEventResponse {
        public String user;

        public String token;

        public BigInteger amount;
    }

    public static class ExitStartedEventResponse extends BaseEventResponse {
        public String exitor;

        public BigInteger utxoPos;

        public String token;

        public BigInteger amount;
    }

    public static class RootChainChangedEventResponse extends BaseEventResponse {
        public String previousRootChain;

        public String newRootChain;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
